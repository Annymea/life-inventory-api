// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/entry": {
            "get": {
                "description": "Returns a list of all entries (fitting to the filters)",
                "summary": "Get all entries (with filters)",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Filter by done status",
                        "name": "done",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by planned date (YYYY-MM-DD)",
                        "name": "date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.EntryDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "description": "Updates the entry with the given ID. The existing item will be completely overwritten by the provided data. The item will be identified by the ID of the item.",
                "summary": "Update a entry",
                "parameters": [
                    {
                        "description": "Updated Entry object",
                        "name": "Entry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EntryDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.EntryDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "post": {
                "description": "Creates a new entry",
                "summary": "Create new entry",
                "parameters": [
                    {
                        "description": "New entry",
                        "name": "entry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EntryDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.EntryDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/entry/{id}": {
            "get": {
                "description": "Returns exactly one entry with the given ID",
                "summary": "Get a entry by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the entry",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.EntryDto"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "description": "Deletes exactly one entry by ID",
                "summary": "Delete a entry by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the entry",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/list": {
            "get": {
                "description": "Returns a list of all entries",
                "summary": "Get all entries",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.EntryDto"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.EntryDto": {
            "type": "object",
            "properties": {
                "done": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "plannedDate": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Life Inventory API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
