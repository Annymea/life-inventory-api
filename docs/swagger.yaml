basePath: /api/v1
definitions:
  models.AuthInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.CreateEntryDto:
    properties:
      done:
        type: boolean
      plannedDate:
        type: string
      title:
        type: string
    type: object
  models.EntryDto:
    properties:
      done:
        type: boolean
      id:
        type: string
      plannedDate:
        type: string
      title:
        type: string
    type: object
info:
  contact: {}
  description: Dokumentation der REST-API
  title: Meine API
  version: "1.0"
paths:
  /auth/login:
    post:
      description: Returns valid token for a user to use it for the api requests
      parameters:
      - description: Username and password
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.AuthInput'
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      summary: Returns valid token
      tags:
      - Auth
  /auth/signup:
    post:
      description: Create a user which can be used to create a token
      parameters:
      - description: Username and password
        in: body
        name: signup
        required: true
        schema:
          $ref: '#/definitions/models.AuthInput'
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      summary: Creates a user
      tags:
      - Auth
  /entry:
    get:
      description: Returns a list of all entries (fitting to the filters)
      parameters:
      - description: Filter by done status
        in: query
        name: done
        type: boolean
      - description: Filter by planned date (YYYY-MM-DD)
        in: query
        name: date
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EntryDto'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all entries (with filters)
      tags:
      - Entry
    post:
      description: Creates a new entry
      parameters:
      - description: New entry
        in: body
        name: entry
        required: true
        schema:
          $ref: '#/definitions/models.CreateEntryDto'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.EntryDto'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Create new entry
      tags:
      - Entry
    put:
      description: Updates the entry with the given ID. The existing item will be
        completely overwritten by the provided data. The item will be identified by
        the ID of the item.
      parameters:
      - description: Updated Entry object
        in: body
        name: Entry
        required: true
        schema:
          $ref: '#/definitions/models.EntryDto'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EntryDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      security:
      - BearerAuth: []
      summary: Update a entry
      tags:
      - Entry
  /entry/{id}:
    delete:
      description: Deletes exactly one entry by ID
      parameters:
      - description: ID of the entry
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete a entry by ID
      tags:
      - Entry
    get:
      description: Returns exactly one entry with the given ID
      parameters:
      - description: ID of the entry
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EntryDto'
            type: array
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get a entry by ID
      tags:
      - Entry
  /list:
    get:
      description: Returns a list of all entries
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EntryDto'
            type: array
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all entries
      tags:
      - Entry
securityDefinitions:
  BearerAuth:
    description: 'Enter your token with the ''Bearer '' prefix. Example: ''Bearer
      eyJhbGciOi...'''
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: All entry-related endpoints
  name: Entry
- description: Login & registration
  name: Auth
